{"version":3,"sources":["ng://gamifilearning-lib/lib/app.component.ts","ng://gamifilearning-lib/lib/dashboard/dashboard.component.ts","ng://gamifilearning-lib/lib/leaderboard/leaderboard.component.ts","node_modules/tslib/tslib.es6.js","ng://gamifilearning-lib/lib/config.ts","ng://gamifilearning-lib/lib/shared/question.service.ts","ng://gamifilearning-lib/lib/shared/gamification.service.ts","ng://gamifilearning-lib/lib/shared/animations.ts","ng://gamifilearning-lib/lib/reward-dialog/reward-dialog.component.ts","ng://gamifilearning-lib/lib/question-room/question-room.component.ts","ng://gamifilearning-lib/lib/shared/user.service.ts","ng://gamifilearning-lib/lib/navbar/navbar.component.ts","ng://gamifilearning-lib/lib/chart/chart.component.ts","ng://gamifilearning-lib/lib/score-display/score-display.component.ts","ng://gamifilearning-lib/lib/shared/translate.pipe.ts","ng://gamifilearning-lib/lib/app.module.ts","ng://gamifilearning-lib/lib/shared/communication.service.ts"],"names":["RootComponent","prototype","ngOnInit","Component","args","selector","template","DashboardComponent","this","cards","title","cols","rows","LeaderboardComponent","columnsToDisplay","users","name","rank","score","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","URL_TO_DATA","QuestionService","data","currentInstance","BehaviorSubject","currentInstance$","asObservable","answers","answers$","getUnlabeledInstances","filter","feature","features","getTopInstances","number","sort","a","b","slice","handleSubmittedAnswers","Injectable","providedIn","GamificationService","http","_this","score$","progress","progress$","fetchScore","subscribe","increaseScore","weight","doIncreaseScore","getTrivia","date","Date","get","getMonth","getDate","responseType","getRandomGif","query","params","api_key","limit","rating","q","pipe","map","gif","getRandomElement","of","Math","floor","array","random","length","HttpClient","pulseAnimation","animation","style","transform","animate","keyframes","offset","RewardDialogComponent","gamification","trivia","thanksPic","moneyPic","total","Inject","MAT_DIALOG_DATA","QuestionRoomComponent","question","dialog","snack","currentQuestion","tempAnswers","showProgressbar","doUpdateRewards","console","log","maxProgress","ngOnChanges","changes","isDone","sendAnswer","answer","answersToBackend","concat","createAnswer","claimReward","reward","unlocked","open","onKey","event","answerMode","key","submitAnswer","documentId","id","questionId","questions","updateRewards","tmpLocked","rewards","lockedRewards","forEach","position","__spread","arguments","mockAchievementCheck","percent","duration","animations","trigger","transition","opacity","useAnimation","timings","scale","MatDialog","MatSnackBar","Input","ViewChild","UserService","NavbarComponent","user","gamificationService","ChartComponent","view","undefined","showXAxis","showYAxis","gradient","showLegend","showXAxisLabel","xAxisLabel","showYAxisLabel","yAxisLabel","timeline","colorScheme","domain","multi","ScoreDisplayComponent","TranslatePipe","Pipe","MaterialModules","MatInputModule","MatProgressBarModule","MatCardModule","MatButtonModule","MatGridListModule","MatMenuModule","MatIconModule","LayoutModule","MatTableModule","MatToolbarModule","MatBadgeModule","MatListModule","MatProgressSpinnerModule","MatTooltipModule","MatDialogModule","MatSnackBarModule","GLModule","NgModule","declarations","imports","BrowserModule","BrowserAnimationsModule","HttpClientModule","FormsModule","providers","bootstrap","exports","entryComponents","CommunicationService","loadData","src","res","enhanceFeatures"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'gl-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class RootComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    // this.communication.loadData().subscribe(res => {\r\n    //   this.texts = res;\r\n    // });\r\n    // this.questions = QUESTIONS;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'gl-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent {\r\n  cards = [\r\n    { title: 'Card 1', cols: 1, rows: 1 },\r\n    { title: 'Card 2', cols: 1, rows: 1 },\r\n    { title: 'Card 3', cols: 1, rows: 1 },\r\n    { title: 'Card 4', cols: 1, rows: 1 }\r\n  ];\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'gl-leaderboard',\r\n  templateUrl: './leaderboard.component.html',\r\n  styleUrls: ['./leaderboard.component.scss']\r\n})\r\nexport class LeaderboardComponent implements OnInit {\r\n  columnsToDisplay = ['rank', 'userName', 'score'];\r\n\r\n  users = [\r\n    { name: 'Phil', rank: '1', score: '555' },\r\n    { name: 'Mill', rank: '2', score: '444' },\r\n    { name: 'Bill', rank: '3', score: '333' },\r\n    { name: 'Til', rank: '4', score: '222' }\r\n  ];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export const NUMBER_OF_TEXTS = 5;\r\nexport const NUMBER_OF_UNLABELED_DATA = 500;\r\nexport const UNLABELED_INDEX = 31;\r\nexport const ENTROPY_INDEX = 32;\r\nexport const URL_TO_DATA = './assets/data/mainTfIdf.05112018.feature.json';\r\nexport const URL_TO_LOGIN = 'http://meslis-test-3.corp.deecoob.com:58190';\r\nexport const MESLISPW =\r\n  '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08';\r\nexport const MESLISUSER = 'test';\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { JsonFeature, BackendResponse, Answer } from './data.interface.js';\r\nimport { NUMBER_OF_TEXTS, UNLABELED_INDEX, ENTROPY_INDEX } from '../config.js';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuestionService {\r\n  data: JsonFeature[] = [];\r\n\r\n  private currentInstance = new BehaviorSubject<BackendResponse>(null);\r\n  currentInstance$ = this.currentInstance.asObservable();\r\n\r\n  private answers = new BehaviorSubject<Answer[]>([]);\r\n  answers$ = this.answers.asObservable();\r\n\r\n  constructor(/** private communication: CommunicationService*/) {\r\n    // this.updateNextInstance();\r\n  }\r\n\r\n  getUnlabeledInstances(data: JsonFeature[] = this.data): JsonFeature[] {\r\n    return data.filter(feature => feature.features[1][UNLABELED_INDEX] != null);\r\n  }\r\n\r\n  /**\r\n   * Return top scoring data objects\r\n   * @param data corresponding data set\r\n   * @param number number of instances to return\r\n   */\r\n  getTopInstances(\r\n    data: JsonFeature[],\r\n    number: number = NUMBER_OF_TEXTS\r\n  ): JsonFeature[] {\r\n    const unlabeled = this.getUnlabeledInstances(data);\r\n    return unlabeled\r\n      .sort((a, b) => {\r\n        if (a.features[1][ENTROPY_INDEX] < b.features[1][ENTROPY_INDEX]) {\r\n          return 1;\r\n        } else {\r\n          return -1;\r\n        }\r\n      })\r\n      .slice(0, number);\r\n  }\r\n\r\n  handleSubmittedAnswers(answers: Answer[]) {\r\n    this.answers.next(answers);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\n\r\nconst GIPHY_API_KEY = 'n8VZGDtSpax8HM6j486SScMj5vMcavN2';\r\nconst GIPHY_URL = 'http://api.giphy.com/v1/gifs/search';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GamificationService {\r\n  private score = new BehaviorSubject(0);\r\n  score$ = this.score.asObservable();\r\n\r\n  private progress = new BehaviorSubject(0);\r\n  progress$ = this.progress.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.fetchScore().subscribe(score => this.score.next(score));\r\n  }\r\n\r\n  increaseScore(weight: number) {\r\n    this.doIncreaseScore(weight).subscribe(score => this.score.next(score));\r\n    // this.score.next(this.score.value + Math.floor(weight * 100));\r\n  }\r\n\r\n  getTrivia(date: Date = new Date()) {\r\n    return this.http.get(\r\n      `http://numbersapi.com/${date.getMonth() + 1}/${date.getDate()}/date`,\r\n      {\r\n        responseType: 'text'\r\n      }\r\n    );\r\n  }\r\n\r\n  getRandomGif(query: string) {\r\n    return this.http\r\n      .get(GIPHY_URL, {\r\n        params: {\r\n          api_key: GIPHY_API_KEY,\r\n          limit: '50',\r\n          rating: 'g',\r\n          q: query\r\n        }\r\n      })\r\n      .pipe(\r\n        // chose a random gif out of the array of gifs\r\n        map((gif: any) => this.getRandomElement(gif.data))\r\n      );\r\n  }\r\n\r\n  // currently mocked. Should be persisted in backend later\r\n  private fetchScore() {\r\n    return of(500);\r\n  }\r\n\r\n  // currently mocked too\r\n  private doIncreaseScore(weight: number) {\r\n    return of(this.score.value + Math.floor(weight * 100));\r\n  }\r\n\r\n  /** Helper function to chose a random element from an array */\r\n  private getRandomElement<T>(array: T[]): T {\r\n    return array[Math.floor(Math.random() * array.length)];\r\n  }\r\n}\r\n","import { style, animation, animate, keyframes } from '@angular/animations';\r\n\r\nexport const pulseAnimation = animation([\r\n  style({ transform: 'scale(1)' }),\r\n  animate(\r\n    '{{ timings }}',\r\n    keyframes([\r\n      style({ transform: 'scale(1)', offset: 0 }),\r\n      style({ transform: 'scale({{ scale }})', offset: 0.5 }),\r\n      style({ transform: 'scale(1)', offset: 1 })\r\n    ])\r\n  )\r\n]);\r\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { GamificationService } from '../shared/gamification.service';\nimport { MAT_DIALOG_DATA } from '@angular/material';\n\n@Component({\n  selector: 'gl-reward-dialog',\n  templateUrl: './reward-dialog.component.html',\n  styleUrls: ['./reward-dialog.component.scss']\n})\nexport class RewardDialogComponent implements OnInit {\n  trivia = this.gamification.getTrivia();\n  thanksPic = this.gamification.getRandomGif('thanks');\n  moneyPic = this.gamification.getRandomGif('rich');\n  total;\n  constructor(\n    private gamification: GamificationService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {}\n\n  ngOnInit() {\n    this.total = this.data.total;\n  }\n}\n","import { Component, OnInit, ViewChild, Input, OnChanges } from '@angular/core';\r\nimport { QuestionService } from '../shared/question.service';\r\nimport { MatSelectionList } from '@angular/material/list';\r\nimport { GamificationService } from '../shared/gamification.service';\r\nimport { Answer, BackendResponse } from '../shared/data.interface';\r\nimport {\r\n  trigger,\r\n  transition,\r\n  style,\r\n  animate,\r\n  keyframes,\r\n  useAnimation\r\n} from '@angular/animations';\r\nimport { pulseAnimation } from '../shared/animations';\r\nimport { MatDialog, MatSnackBar } from '@angular/material';\r\nimport { RewardDialogComponent } from '../reward-dialog/reward-dialog.component';\r\n\r\nexport interface Reward {\r\n  position: number;\r\n  unlocked: boolean;\r\n  // label: string;\r\n  icon: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'gl-question-room',\r\n  templateUrl: './question-room.component.html',\r\n  styleUrls: ['./question-room.component.scss'],\r\n  animations: [\r\n    trigger('fadeIn', [\r\n      transition(':increment', [\r\n        animate(\r\n          '500ms',\r\n          keyframes([\r\n            style({ opacity: '1' }),\r\n            style({ opacity: '0' }),\r\n            style({ opacity: '1' })\r\n          ])\r\n        )\r\n      ])\r\n    ]),\r\n    trigger('unlockReward', [\r\n      transition('false => true', [\r\n        useAnimation(pulseAnimation, {\r\n          params: {\r\n            timings: '400ms cubic-bezier(.11,.99,.83,.43)',\r\n            scale: 1.5\r\n          }\r\n        })\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class QuestionRoomComponent implements OnInit, OnChanges {\r\n  currentQuestion = 0;\r\n  tempAnswers: Answer[] = [];\r\n  lockedRewards;\r\n\r\n  @Input() maxProgress: number;\r\n  @Input() done: number;\r\n  @Input() currentInstance: any;\r\n  @Input() rewards: Reward[];\r\n  @Input() questions: string[];\r\n  @Input() answers: string[];\r\n  @Input() showProgressbar = true;\r\n  @Input() answerMode: string;\r\n\r\n  @ViewChild('selectionList')\r\n  selection: MatSelectionList;\r\n  constructor(\r\n    private question: QuestionService,\r\n    private gamification: GamificationService,\r\n    private dialog: MatDialog,\r\n    private snack: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.doUpdateRewards();\r\n    console.log(this.done, this.maxProgress);\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.done) {\r\n      this.doUpdateRewards();\r\n    }\r\n  }\r\n\r\n  isDone(): boolean {\r\n    return !(this.done < this.maxProgress);\r\n  }\r\n\r\n  sendAnswer(answer: string) {\r\n    const answersToBackend = this.tempAnswers.concat(this.createAnswer(answer));\r\n    this.tempAnswers = [];\r\n    this.question.handleSubmittedAnswers(answersToBackend);\r\n  }\r\n\r\n  claimReward(reward) {\r\n    if (reward.unlocked) {\r\n      this.dialog.open(RewardDialogComponent, {\r\n        data: { total: reward.total }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle keyboard interaction\r\n   * Only working hardcoded for binary atm\r\n   */\r\n  onKey(event: KeyboardEvent) {\r\n    if (this.answerMode !== 'binary') {\r\n      return false;\r\n    }\r\n    switch (event.key) {\r\n      case 'ArrowLeft':\r\n        this.submitAnswer('yes');\r\n        break;\r\n      case 'ArrowRight':\r\n        this.submitAnswer('no');\r\n        break;\r\n      case 'ArrowUp':\r\n        this.submitAnswer('maybe');\r\n        break;\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  private createAnswer(answer: string): Answer {\r\n    let newAnswer: Answer;\r\n    newAnswer = {\r\n      documentId: this.currentInstance.id,\r\n      questionId: this.questions[this.currentQuestion],\r\n      answer: answer\r\n    };\r\n    return newAnswer;\r\n  }\r\n\r\n  // Tracking the temp rewards is necessary to react to unlocked rewards\r\n  // This might need an overhaul since it's too complicated\r\n  private updateRewards() {\r\n    const locked = this.rewards.filter(reward => reward.unlocked === false);\r\n    const tmpLocked = locked;\r\n    this.doUpdateRewards();\r\n    this.lockedRewards = this.rewards.filter(\r\n      reward => reward.unlocked === false\r\n    );\r\n    if (this.lockedRewards.length < tmpLocked.length) {\r\n      this.claimReward(tmpLocked[0]);\r\n    }\r\n    console.log(this.lockedRewards, tmpLocked);\r\n  }\r\n\r\n  private doUpdateRewards() {\r\n    const locked = this.rewards.filter(reward => reward.unlocked === false);\r\n    // Update unlock status flag on all rewards\r\n    locked.forEach(reward => {\r\n      if ((this.done / this.maxProgress) * 100 >= reward.position) {\r\n        reward.unlocked = true;\r\n        console.log(reward);\r\n      }\r\n    });\r\n  }\r\n\r\n  submitAnswer(answer: string) {\r\n    if (this.currentQuestion + 1 < this.questions.length) {\r\n      this.tempAnswers = [...this.tempAnswers, this.createAnswer(answer)];\r\n      this.currentQuestion++;\r\n    } else {\r\n      // One Iteration of Question-Package done\r\n      this.sendAnswer(answer);\r\n      this.currentQuestion = 0;\r\n      this.done++;\r\n      this.updateRewards();\r\n    }\r\n    this.mockAchievementCheck();\r\n  }\r\n\r\n  mockAchievementCheck() {\r\n    if (Math.random() < 0.05) {\r\n      const percent = Math.floor(Math.random() * 25) + 75;\r\n      this.snack.open(percent + '% deiner Kollegen wÃ¤hlten dasselbe ð', 'OK', {\r\n        duration: 2000\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\n\r\nexport interface User {\r\n  id: number;\r\n  username: string;\r\n  jwtToken: { token: string };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  user: User;\r\n\r\n  constructor() {}\r\n\r\n  // login(username: string, password: string): Observable<User> {\r\n  //   return this.apollo\r\n  //     .query({\r\n  //       query: gql`\r\n  //         {\r\n  //           login(username: \"${username}\", password: \"${password}\") {\r\n  //             id,\r\n  //             firstName,\r\n  //             lastName,\r\n  //             username,\r\n  //             jwtToken {\r\n  //               token\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //       `\r\n  //     })\r\n  //     .pipe(\r\n  //       map((res: any) => {\r\n  //         this.user = res.data.login;\r\n  //         window.localStorage.setItem('token', this.user.jwtToken.token);\r\n  //         return this.user;\r\n  //       })\r\n  //     );\r\n  // }\r\n\r\n  // logout(): void {\r\n  //   this.apollo\r\n  //     .query({\r\n  //       query: gql`\r\n  //         {\r\n  //           logout\r\n  //         }\r\n  //       `\r\n  //     })\r\n  //     .subscribe(\r\n  //       _ => {\r\n  //         window.localStorage.removeItem('token');\r\n  //         this.router.navigate(['/']);\r\n  //       },\r\n  //       err => {\r\n  //         console.error(err);\r\n  //       }\r\n  //     );\r\n  // }\r\n\r\n  // isLogged(): boolean {\r\n  //   return window.localStorage.getItem('token') ? true : false;\r\n  // }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { GamificationService } from '../shared/gamification.service';\r\nimport { UserService } from '../shared/user.service';\r\n\r\n@Component({\r\n  selector: 'gl-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.scss']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n  gamification = this.gamificationService;\r\n  constructor(\r\n    public user: UserService,\r\n    private gamificationService: GamificationService\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'gl-chart',\r\n  templateUrl: './chart.component.html',\r\n  styleUrls: ['./chart.component.scss']\r\n})\r\nexport class ChartComponent implements OnInit {\r\n  view = undefined;\r\n\r\n  // options\r\n  showXAxis = true;\r\n  showYAxis = true;\r\n  gradient = false;\r\n  showLegend = true;\r\n  showXAxisLabel = true;\r\n  xAxisLabel = 'Number';\r\n  showYAxisLabel = true;\r\n  yAxisLabel = 'Color Value';\r\n  timeline = true;\r\n\r\n  colorScheme = {\r\n    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA']\r\n  };\r\n\r\n  multi: any[] = [\r\n    {\r\n      name: 'Accuracy',\r\n      value: 83\r\n    },\r\n    {\r\n      name: 'F1 Score',\r\n      value: 91\r\n    }\r\n  ];\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { trigger, transition, useAnimation } from '@angular/animations';\r\nimport { pulseAnimation } from '../shared/animations';\r\nimport { GamificationService } from '../shared/gamification.service';\r\n\r\n@Component({\r\n  selector: 'gl-score-display',\r\n  templateUrl: './score-display.component.html',\r\n  styleUrls: ['./score-display.component.scss'],\r\n  animations: [\r\n    trigger('scoreChange', [\r\n      transition(\r\n        ':increment',\r\n        useAnimation(pulseAnimation, {\r\n          params: {\r\n            timings: '400ms cubic-bezier(.11,.99,.83,.43)',\r\n            scale: 1.25\r\n          }\r\n        })\r\n      )\r\n    ])\r\n  ]\r\n})\r\nexport class ScoreDisplayComponent implements OnInit {\r\n  constructor(public gamification: GamificationService) {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Very quick and dirty solution to \"translate\" Ids from backend\n * Angular i18n currently can't translate variables\n * ngx-translate would add another dependency\n */\n@Pipe({\n  name: 'translate'\n})\nexport class TranslatePipe implements PipeTransform {\n  transform(value: string, args?: any): any {\n    switch (value) {\n      case 'isEvent':\n        return 'Beschreibt der Text eine <b>Veranstaltung</b>?';\n      case 'isMusic':\n        return 'Geht es inhaltlich um <b>Musik</b>?';\n      case 'isMovie':\n        return 'Geht es inhaltlich um <b>Filme</b>?';\n      case 'yes':\n        return 'Ja';\n      case 'no':\n        return 'Nein';\n      case 'maybe':\n        return 'Unklar';\n      case '1':\n        return 'Trifft nicht zu';\n      case '2':\n        return 'Trifft eher nicht zu';\n      case '3':\n        return 'WeiÃ nicht';\n      case '4':\n        return 'Trifft eher zu';\n      case '5':\n        return 'Trifft zu';\n      default:\n        return value;\n    }\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { RootComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n// import { NgxChartsModule } from '@swimlane/ngx-charts';\r\n\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport {\r\n  MatGridListModule,\r\n  MatCardModule,\r\n  MatMenuModule,\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatProgressBarModule,\r\n  MatInputModule,\r\n  MatTableModule,\r\n  MatToolbarModule,\r\n  MatBadgeModule,\r\n  MatListModule,\r\n  MatProgressSpinnerModule,\r\n  MatTooltipModule,\r\n  MatDialogModule,\r\n  MatSnackBarModule\r\n} from '@angular/material';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { LeaderboardComponent } from './leaderboard/leaderboard.component';\r\nimport { QuestionRoomComponent } from './question-room/question-room.component';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { ChartComponent } from './chart/chart.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ScoreDisplayComponent } from './score-display/score-display.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RewardDialogComponent } from './reward-dialog/reward-dialog.component';\r\nimport { TranslatePipe } from './shared/translate.pipe';\r\n\r\nconst MaterialModules = [\r\n  MatInputModule,\r\n  MatProgressBarModule,\r\n  MatCardModule,\r\n  MatButtonModule,\r\n  MatGridListModule,\r\n  MatMenuModule,\r\n  MatIconModule,\r\n  LayoutModule,\r\n  MatTableModule,\r\n  MatToolbarModule,\r\n  MatBadgeModule,\r\n  MatListModule,\r\n  MatProgressSpinnerModule,\r\n  MatTooltipModule,\r\n  MatDialogModule,\r\n  MatSnackBarModule\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    RootComponent,\r\n    DashboardComponent,\r\n    LeaderboardComponent,\r\n    QuestionRoomComponent,\r\n    NavbarComponent,\r\n    ChartComponent,\r\n    ScoreDisplayComponent,\r\n    RewardDialogComponent,\r\n    TranslatePipe\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModules,\r\n    HttpClientModule,\r\n    FormsModule\r\n    // NgxChartsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [RootComponent],\r\n  exports: [RootComponent, QuestionRoomComponent, ScoreDisplayComponent],\r\n  entryComponents: [QuestionRoomComponent, RewardDialogComponent]\r\n})\r\nexport class GLModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { JsonFeature, BackendResponse, Answer } from './data.interface';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { UNLABELED_INDEX, ENTROPY_INDEX, URL_TO_DATA } from '../config';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommunicationService {\r\n  data: JsonFeature[] = [];\r\n  constructor(private http: HttpClient) {}\r\n  loadData(src: string = URL_TO_DATA): Observable<JsonFeature[]> {\r\n    return this.http\r\n      .get<JsonFeature[]>(URL_TO_DATA)\r\n      .pipe(map(res => this.enhanceFeatures(res)));\r\n  }\r\n\r\n  /** Mocking data to add unlabeled data and selectionScore (entropy) */\r\n  enhanceFeatures(data: JsonFeature[]): JsonFeature[] {\r\n    const features = data;\r\n    for (let i = 0; i < features.length / 2; i++) {\r\n      features[i]['features'][1][UNLABELED_INDEX] = 0;\r\n      features[i]['features'][1][ENTROPY_INDEX] = Math.random();\r\n    }\r\n    return features;\r\n  }\r\n\r\n  // getNextInstance(): Observable<BackendResponse> {\r\n  //   // TODO clean up subscribe chain\r\n  //   return this.http.get<BackendResponse>('assets/mock.dataobject.json').pipe(\r\n  //     map(obj => {\r\n  //       this.http\r\n  //         .get<string>('https://icanhazdadjoke.com/', {\r\n  //           headers: new HttpHeaders({\r\n  //             Accept: 'application/json'\r\n  //           })\r\n  //         })\r\n  //         .subscribe((quote: any) => {\r\n  //           obj.text = quote.joke;\r\n  //         });\r\n  //       obj.objectId = Math.floor(Math.random() * 100);\r\n  //       return obj;\r\n  //     })\r\n  //   );\r\n  // }\r\n\r\n  // sendAnswersBack(answer: Answer[]): Observable<boolean> {\r\n  //   // Fake connection\r\n  //   return of(true);\r\n  // }\r\n}\r\n"]}