!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/platform-browser"),require("@angular/platform-browser/animations"),require("@angular/cdk/layout"),require("rxjs"),require("@angular/material"),require("@angular/animations"),require("@angular/forms"),require("@angular/core"),require("rxjs/operators"),require("@angular/common/http")):"function"==typeof define&&define.amd?define("gamifilearning-lib",["exports","@angular/platform-browser","@angular/platform-browser/animations","@angular/cdk/layout","rxjs","@angular/material","@angular/animations","@angular/forms","@angular/core","rxjs/operators","@angular/common/http"],n):n(t["gamifilearning-lib"]={},t.ng.platformBrowser,t.ng.platformBrowser.animations,t.ng.cdk.layout,t.rxjs,t.ng.material,t.ng.animations,t.ng.forms,t.ng.core,t.rxjs.operators,t.ng.common.http)}(this,function(t,n,e,r,a,o,s,i,c,l,u){"use strict";var d=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:c.Component,args:[{selector:"gl-root",template:'<div class="wrapper">\r\n  <gl-navbar></gl-navbar>\r\n  \x3c!--\r\n    <gl-question-room\r\n      [texts]="texts | async"\r\n      [questions]="questions"\r\n    ></gl-question-room>\r\n  --\x3e\r\n</div>\r\n',styles:[".wrapper{background-color:#eee;height:100vh;display:-ms-grid;display:grid;-ms-grid-rows:auto 1fr;grid-template-rows:auto 1fr;-ms-grid-columns:50px 1fr 50px;grid-template-columns:50px 1fr 50px}gl-navbar{-ms-grid-column:1;-ms-grid-column-span:3;grid-column:1/4}gl-question-room{-ms-grid-column:2;grid-column-start:2;-ms-grid-column-span:1;grid-column-end:3;-ms-grid-row:2;-ms-grid-row-span:5;grid-row:2/7}"]}]}],t.ctorParameters=function(){return[]},t}(),m=function(){function t(){this.cards=[{title:"Card 1",cols:1,rows:1},{title:"Card 2",cols:1,rows:1},{title:"Card 3",cols:1,rows:1},{title:"Card 4",cols:1,rows:1}]}return t.decorators=[{type:c.Component,args:[{selector:"gl-dashboard",template:'<div class="grid-container">\r\n  <h1 class="mat-h1">Dashboard</h1>\r\n  <mat-grid-list cols="2" rowHeight="350px">\r\n    <mat-grid-tile [colspan]="2" [rowspan]="1">\r\n      <mat-card class="dashboard-card">\r\n        <mat-card-header>\r\n          <mat-card-title>\r\n            Leaderboard\r\n            <button\r\n              mat-icon-button\r\n              class="more-button"\r\n              [matMenuTriggerFor]="menu"\r\n              aria-label="Toggle menu"\r\n            >\r\n              <mat-icon>more_vert</mat-icon>\r\n            </button>\r\n            <mat-menu #menu="matMenu" xPosition="before">\r\n              <button mat-menu-item>Expand</button>\r\n              <button mat-menu-item>Remove</button>\r\n            </mat-menu>\r\n          </mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content class="dashboard-card-content">\r\n          \x3c!-- <app-leaderboard></app-leaderboard> --\x3e\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </mat-grid-tile>\r\n    <mat-grid-tile *ngFor="let card of cards" [colspan]="1" [rowspan]="1">\r\n      <mat-card class="dashboard-card">\r\n        <mat-card-header>\r\n          <mat-card-title>\r\n            {{ card.title }}\r\n            <button\r\n              mat-icon-button\r\n              class="more-button"\r\n              [matMenuTriggerFor]="menu"\r\n              aria-label="Toggle menu"\r\n            >\r\n              <mat-icon>more_vert</mat-icon>\r\n            </button>\r\n            <mat-menu #menu="matMenu" xPosition="before">\r\n              <button mat-menu-item>Expand</button>\r\n              <button mat-menu-item>Remove</button>\r\n            </mat-menu>\r\n          </mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content class="dashboard-card-content">\r\n          <div>Card Content Here</div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </mat-grid-tile>\r\n  </mat-grid-list>\r\n</div>\r\n',styles:[".grid-container{padding:20px}.dashboard-card{position:absolute;top:15px;left:15px;right:15px;bottom:15px}.more-button{position:absolute;top:5px;right:10px}"]}]}],t.ctorParameters=function(){return[]},t}(),p=function(){function t(){this.columnsToDisplay=["rank","userName","score"],this.users=[{name:"Phil",rank:"1",score:"555"},{name:"Mill",rank:"2",score:"444"},{name:"Bill",rank:"3",score:"333"},{name:"Til",rank:"4",score:"222"}]}return t.prototype.ngOnInit=function(){},t.decorators=[{type:c.Component,args:[{selector:"gl-leaderboard",template:'<table mat-table [dataSource]="users">\r\n  <ng-container matColumnDef="rank">\r\n    <th mat-header-cell *matHeaderCellDef> Rank </th>\r\n    <td mat-cell *matCellDef="let user"> {{user.rank}} </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef="userName">\r\n    <th mat-header-cell *matHeaderCellDef> Name </th>\r\n    <td mat-cell *matCellDef="let user"> {{user.name}} </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef="score">\r\n    <th mat-header-cell *matHeaderCellDef> Score </th>\r\n    <td mat-cell *matCellDef="let user"> {{user.score}} </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef="columnsToDisplay"></tr>\r\n  <tr mat-row *matRowDef="let myRowData; columns: columnsToDisplay"></tr>\r\n</table>',styles:["table{width:100%}"]}]}],t.ctorParameters=function(){return[]},t}();function g(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,a,o=e.call(t),s=[];try{for(;(void 0===n||0<n--)&&!(r=o.next()).done;)s.push(r.value)}catch(i){a={error:i}}finally{try{r&&!r.done&&(e=o["return"])&&e.call(o)}finally{if(a)throw a.error}}return s}var f="./assets/data/mainTfIdf.05112018.feature.json",h=function(){function t(){this.data=[],this.currentInstance=new a.BehaviorSubject(null),this.currentInstance$=this.currentInstance.asObservable(),this.answers=new a.BehaviorSubject([]),this.answers$=this.answers.asObservable()}return t.prototype.getUnlabeledInstances=function(t){return void 0===t&&(t=this.data),t.filter(function(t){return null!=t.features[1][31]})},t.prototype.getTopInstances=function(t,n){return void 0===n&&(n=5),this.getUnlabeledInstances(t).sort(function(t,n){return t.features[1][32]<n.features[1][32]?1:-1}).slice(0,n)},t.prototype.handleSubmittedAnswers=function(t){this.answers.next(t)},t.decorators=[{type:c.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=c.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),b=function(){function t(t){var n=this;this.http=t,this.score=new a.BehaviorSubject(0),this.score$=this.score.asObservable(),this.progress=new a.BehaviorSubject(0),this.progress$=this.progress.asObservable(),this.fetchScore().subscribe(function(t){return n.score.next(t)})}return t.prototype.increaseScore=function(t){var n=this;this.doIncreaseScore(t).subscribe(function(t){return n.score.next(t)})},t.prototype.getTrivia=function(t){return void 0===t&&(t=new Date),this.http.get("http://numbersapi.com/"+(t.getMonth()+1)+"/"+t.getDate()+"/date",{responseType:"text"})},t.prototype.getRandomGif=function(t){var n=this;return this.http.get("http://api.giphy.com/v1/gifs/search",{params:{api_key:"n8VZGDtSpax8HM6j486SScMj5vMcavN2",limit:"50",rating:"g",q:t}}).pipe(l.map(function(t){return n.getRandomElement(t.data)}))},t.prototype.fetchScore=function(){return a.of(500)},t.prototype.doIncreaseScore=function(t){return a.of(this.score.value+Math.floor(100*t))},t.prototype.getRandomElement=function(t){return t[Math.floor(Math.random()*t.length)]},t.decorators=[{type:c.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:u.HttpClient}]},t.ngInjectableDef=c.defineInjectable({factory:function(){return new t(c.inject(u.HttpClient))},token:t,providedIn:"root"}),t}(),w=s.animation([s.style({transform:"scale(1)"}),s.animate("{{ timings }}",s.keyframes([s.style({transform:"scale(1)",offset:0}),s.style({transform:"scale({{ scale }})",offset:.5}),s.style({transform:"scale(1)",offset:1})]))]),y=function(){function t(t,n){this.gamification=t,this.data=n,this.trivia=this.gamification.getTrivia(),this.thanksPic=this.gamification.getRandomGif("thanks"),this.moneyPic=this.gamification.getRandomGif("rich")}return t.prototype.ngOnInit=function(){this.total=this.data.total},t.decorators=[{type:c.Component,args:[{selector:"gl-reward-dialog",template:'<h2 mat-dialog-title>Wohoo!</h2>\n<mat-dialog-content>\n  <p>\n    Du hast weitere 5 Euro verdient! Damit hast du insgesamt\n    <b>{{ total }} Euro</b> auf dem Konto!\n  </p>\n  <img src="{{ (moneyPic | async)?.images.original.url }}" />\n  <h3>Hast du gewusst?</h3>\n  <p>{{ trivia | async }}</p>\n  \x3c!-- <h2>And also</h2>\n  <img\n    src="{{ (thanksPic | async)?.images.original.url }}"\n    alt="Belohnungs-GIF"\n    width="75%"\n  /> --\x3e\n</mat-dialog-content>\n',styles:[""]}]}],t.ctorParameters=function(){return[{type:b},{type:undefined,decorators:[{type:c.Inject,args:[o.MAT_DIALOG_DATA]}]}]},t}(),x=function(){function t(t,n,e,r){this.question=t,this.gamification=n,this.dialog=e,this.snack=r,this.currentQuestion=0,this.tempAnswers=[],this.showProgressbar=!0}return t.prototype.ngOnInit=function(){this.doUpdateRewards(),console.log(this.done,this.maxProgress)},t.prototype.ngOnChanges=function(t){t.done&&this.doUpdateRewards()},t.prototype.isDone=function(){return!(this.done<this.maxProgress)},t.prototype.sendAnswer=function(t){var n=this.tempAnswers.concat(this.createAnswer(t));this.tempAnswers=[],this.question.handleSubmittedAnswers(n)},t.prototype.claimReward=function(t){t.unlocked&&this.dialog.open(y,{data:{total:t.total}})},t.prototype.onKey=function(t){if("binary"!==this.answerMode)return!1;switch(t.key){case"ArrowLeft":this.submitAnswer("yes");break;case"ArrowRight":this.submitAnswer("no");break;case"ArrowUp":this.submitAnswer("maybe");break;default:return null}},t.prototype.createAnswer=function(t){return{documentId:this.currentInstance.id,questionId:this.questions[this.currentQuestion],answer:t}},t.prototype.updateRewards=function(){var t=this.rewards.filter(function(t){return!1===t.unlocked});this.doUpdateRewards(),this.lockedRewards=this.rewards.filter(function(t){return!1===t.unlocked}),this.lockedRewards.length<t.length&&this.claimReward(t[0]),console.log(this.lockedRewards,t)},t.prototype.doUpdateRewards=function(){var n=this;this.rewards.filter(function(t){return!1===t.unlocked}).forEach(function(t){n.done/n.maxProgress*100>=t.position&&(t.unlocked=!0,console.log(t))})},t.prototype.submitAnswer=function(t){this.currentQuestion+1<this.questions.length?(this.tempAnswers=function e(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(g(arguments[n]));return t}(this.tempAnswers,[this.createAnswer(t)]),this.currentQuestion++):(this.sendAnswer(t),this.currentQuestion=0,this.done++,this.updateRewards()),this.mockAchievementCheck()},t.prototype.mockAchievementCheck=function(){if(Math.random()<.05){var t=Math.floor(25*Math.random())+75;this.snack.open(t+"% deiner Kollegen wählten dasselbe 😁","OK",{duration:2e3})}},t.decorators=[{type:c.Component,args:[{selector:"gl-question-room",template:'<section\r\n  (keyup)="onKey($event)"\r\n  class="content"\r\n  *ngIf="currentInstance"\r\n  tabindex="-1"\r\n>\r\n  <div class="progressbar-container" *ngIf="showProgressbar">\r\n    <span class="progress-label">{{ done }} / {{ maxProgress }}</span>\r\n\r\n    <mat-progress-bar\r\n      mode="determinate"\r\n      value="{{ (done / maxProgress) * 100 }}"\r\n    ></mat-progress-bar>\r\n    <div\r\n      class="reward-icon"\r\n      *ngFor="let reward of rewards"\r\n      [ngStyle]="{ \'left.%\': reward.position }"\r\n    >\r\n      \x3c!-- <i\r\n        *ngIf="reward.unlocked;else locked"\r\n        class="fas fa-gift unlocked"\r\n        matTooltip=""\r\n        [matTooltipDisabled]="reward.unlocked"\r\n      ></i> --\x3e\r\n      <i\r\n        class="fas fa-gift"\r\n        [@unlockReward]="reward.unlocked"\r\n        [ngClass]="{ unlocked: reward.unlocked }"\r\n        [matTooltip]="\r\n          reward.unlocked ? reward.total + \' Euro\' : \'Noch nicht erreicht!\'\r\n        "\r\n      ></i>\r\n      \x3c!-- <img\r\n        src="assets/gift.png"\r\n        [@unlockReward]="reward.unlocked"\r\n        [ngClass]="{ unlocked: reward.unlocked }"\r\n        (click)="claimReward(reward.unlocked)"\r\n        matTooltip="Noch nicht freigeschalten!"\r\n        [matTooltipDisabled]="reward.unlocked"\r\n      /> --\x3e\r\n    </div>\r\n  </div>\r\n\r\n  <mat-card class="text-card">\r\n    \x3c!-- <p *ngIf="!isDone(); else labelingDone" [@fadeIn]="done"> --\x3e\r\n    <p *ngIf="!isDone(); else labelingDone">\r\n      {{ currentInstance.text }}\r\n    </p>\r\n    <ng-template #labelingDone>\r\n      <div class="spinner-container">\r\n        <mat-spinner></mat-spinner>\r\n        <p>Verarbeite Daten...</p>\r\n      </div>\r\n    </ng-template>\r\n  </mat-card>\r\n\r\n  <mat-card class="question-card" *ngIf="!isDone()">\r\n    <mat-card-header class="question-text">\r\n      <mat-card-title>\r\n        <span [innerHtml]="questions[currentQuestion] | translate"></span>\r\n      </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <mat-card-actions\r\n        *ngIf="answerMode === \'binary\'"\r\n        class="answer-buttons-container"\r\n      >\r\n        <button\r\n          mat-button\r\n          *ngFor="let answer of answers"\r\n          class="answer-button"\r\n          [ngClass]="answer"\r\n          (click)="submitAnswer(answer)"\r\n        >\r\n          {{ answer | translate }}\r\n        </button>\r\n      </mat-card-actions>\r\n      <mat-card-actions\r\n        *ngIf="answerMode === \'stars\'"\r\n        class="answer-buttons-container"\r\n      >\r\n        \x3c!-- <button mat-button disabled class="rating-info">Wenig</button> --\x3e\r\n        <button\r\n          mat-button\r\n          *ngFor="let answer of answers"\r\n          class="answer-button"\r\n          [ngClass]="answer"\r\n          (click)="submitAnswer(answer)"\r\n        >\r\n          {{ answer | translate }}\r\n        </button>\r\n        \x3c!-- <button mat-button disabled class="rating-info">Viel</button> --\x3e\r\n      </mat-card-actions>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</section>\r\n',animations:[s.trigger("fadeIn",[s.transition(":increment",[s.animate("500ms",s.keyframes([s.style({opacity:"1"}),s.style({opacity:"0"}),s.style({opacity:"1"})]))])]),s.trigger("unlockReward",[s.transition("false => true",[s.useAnimation(w,{params:{timings:"400ms cubic-bezier(.11,.99,.83,.43)",scale:1.5}})])])],styles:[".content{display:-ms-grid;display:grid;-ms-grid-rows:100px 400px 30px 1fr 30px 60px;grid-template-rows:100px 400px 30px 1fr 30px 60px;-ms-grid-columns:1fr;grid-template-columns:1fr}.content:focus{outline:solid 0}.question-text{justify-content:center}.question-text mat-card-title{font-weight:400}.progressbar-container{-ms-grid-row:1;-ms-grid-row-span:1;grid-row:1/2;-ms-grid-row-align:center;align-self:center;position:relative;text-align:center}.progressbar-container mat-progress-bar{margin-bottom:8px}.progressbar-container .reward-icon{display:block;position:absolute;-webkit-transform:translateX(-50%);transform:translateX(-50%);cursor:pointer;color:#9c9c9c}.progressbar-container .unlocked{color:#3f51b5}.progress-label{font-weight:700;line-height:2}.text-card{display:flex;justify-content:center;-ms-grid-row:2;-ms-grid-row-span:1;grid-row:2/3;overflow:auto}.question-area{-ms-grid-row:4;-ms-grid-row-span:3;grid-row:4/7}.question-card{-ms-grid-row:4;-ms-grid-row-span:1;grid-row:4/5}.button-list,.submit-button{-ms-grid-row:6;-ms-grid-row-span:1;grid-row:6/7;-ms-grid-row-align:stretch;align-self:stretch;-ms-grid-column-align:stretch;justify-self:stretch}.mat-card-header-text{text-align:center}.answer-buttons-container{display:flex}.answer-buttons-container .yes{flex-grow:1}.answer-buttons-container .maybe{flex-grow:.5}.answer-buttons-container .no{flex-grow:1}.answer-buttons-container .answer-button{height:60px;flex-grow:1}.answer-buttons-container .rating-info{flex-grow:1;color:#9c9c9c}.spinner-container{text-align:center;-ms-grid-row-align:center;align-self:center}.spinner-container mat-spinner{margin:auto}"]}]}],t.ctorParameters=function(){return[{type:h},{type:b},{type:o.MatDialog},{type:o.MatSnackBar}]},t.propDecorators={maxProgress:[{type:c.Input}],done:[{type:c.Input}],currentInstance:[{type:c.Input}],rewards:[{type:c.Input}],questions:[{type:c.Input}],answers:[{type:c.Input}],showProgressbar:[{type:c.Input}],answerMode:[{type:c.Input}],selection:[{type:c.ViewChild,args:["selectionList"]}]},t}(),v=function(){function t(){}return t.decorators=[{type:c.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=c.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),k=function(){function t(t,n){this.user=t,this.gamificationService=n,this.gamification=this.gamificationService}return t.prototype.ngOnInit=function(){},t.decorators=[{type:c.Component,args:[{selector:"gl-navbar",template:'\x3c!--\r\n  <mat-toolbar color="primary">\r\n    <span class="spacer"></span>\r\n\r\n    <div *ngIf="user.isLogged(); else: notLogged">\r\n      <gl-score-display></gl-score-display>\r\n      <button [matMenuTriggerFor]="menu" class="toolbar-item" mat-icon-button>\r\n        <mat-icon matBadge="4" matBadgeColor="accent">person</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <ng-template #notLogged> <button mat-button>Login</button> </ng-template>\r\n  </mat-toolbar>\r\n  <mat-menu #menu="matMenu">\r\n    <button mat-menu-item disabled>Kontostand</button>\r\n    <button mat-menu-item disabled>Katzenvideos</button>\r\n    <button\r\n      mat-menu-item\r\n      routerLinkActive="router-link-active"\r\n      (click)="user.logout()"\r\n    >\r\n      Logout\r\n    </button>\r\n  </mat-menu>\r\n--\x3e\r\n',styles:[".spacer{flex:1 1 auto}.toolbar-item{margin:0 14px}"]}]}],t.ctorParameters=function(){return[{type:v},{type:b}]},t}(),M=function(){function t(){this.view=undefined,this.showXAxis=!0,this.showYAxis=!0,this.gradient=!1,this.showLegend=!0,this.showXAxisLabel=!0,this.xAxisLabel="Number",this.showYAxisLabel=!0,this.yAxisLabel="Color Value",this.timeline=!0,this.colorScheme={domain:["#5AA454","#A10A28","#C7B42C","#AAAAAA"]},this.multi=[{name:"Accuracy",value:83},{name:"F1 Score",value:91}]}return t.prototype.ngOnInit=function(){},t.decorators=[{type:c.Component,args:[{selector:"gl-chart",template:'\x3c!--\r\n  <ngx-charts-number-card [view]="view" [scheme]="colorScheme" [results]="multi" [cardColor]="\'#263238\'" [textColor]="\'white\'"></ngx-charts-number-card>\r\n--\x3e\r\n',styles:[""]}]}],t.ctorParameters=function(){return[]},t}(),I=function(){function t(t){this.gamification=t}return t.prototype.ngOnInit=function(){},t.decorators=[{type:c.Component,args:[{selector:"gl-score-display",template:'<div class="align-vert" [@scoreChange]="gamification.score$ | async">\r\n  <mat-icon>star</mat-icon>\r\n  <span>{{ gamification.score$ | async }}</span>\r\n</div>\r\n',animations:[s.trigger("scoreChange",[s.transition(":increment",s.useAnimation(w,{params:{timings:"400ms cubic-bezier(.11,.99,.83,.43)",scale:1.25}}))])],styles:[".align-vert{display:inline-flex;vertical-align:middle;align-items:center}"]}]}],t.ctorParameters=function(){return[{type:b}]},t}(),C=function(){function t(){}return t.prototype.transform=function(t,n){switch(t){case"isEvent":return"Beschreibt der Text eine <b>Veranstaltung</b>?";case"isMusic":return"Geht es inhaltlich um <b>Musik</b>?";case"isMovie":return"Geht es inhaltlich um <b>Filme</b>?";case"yes":return"Ja";case"no":return"Nein";case"maybe":return"Unklar";case"1":return"Trifft nicht zu";case"2":return"Trifft eher nicht zu";case"3":return"Weiß nicht";case"4":return"Trifft eher zu";case"5":return"Trifft zu";default:return t}},t.decorators=[{type:c.Pipe,args:[{name:"translate"}]}],t}(),A=[o.MatInputModule,o.MatProgressBarModule,o.MatCardModule,o.MatButtonModule,o.MatGridListModule,o.MatMenuModule,o.MatIconModule,r.LayoutModule,o.MatTableModule,o.MatToolbarModule,o.MatBadgeModule,o.MatListModule,o.MatProgressSpinnerModule,o.MatTooltipModule,o.MatDialogModule,o.MatSnackBarModule],D=function(){function t(){}return t.decorators=[{type:c.NgModule,args:[{declarations:[d,m,p,x,k,M,I,y,C],imports:[n.BrowserModule,e.BrowserAnimationsModule,A,u.HttpClientModule,i.FormsModule],providers:[],bootstrap:[d],exports:[d,x,I],entryComponents:[x,y]}]}],t}(),j=function(){function t(t){this.http=t,this.data=[]}return t.prototype.loadData=function(t){var n=this;return void 0===t&&(t=f),this.http.get(f).pipe(l.map(function(t){return n.enhanceFeatures(t)}))},t.prototype.enhanceFeatures=function(t){for(var n=t,e=0;e<n.length/2;e++)n[e].features[1][31]=0,n[e].features[1][32]=Math.random();return n},t.decorators=[{type:c.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:u.HttpClient}]},t.ngInjectableDef=c.defineInjectable({factory:function(){return new t(c.inject(u.HttpClient))},token:t,providedIn:"root"}),t}();t.GLModule=D,t.RootComponent=d,t.QuestionRoomComponent=x,t.ScoreDisplayComponent=I,t.NavbarComponent=k,t.LeaderboardComponent=p,t.ChartComponent=M,t.DashboardComponent=m,t.CommunicationService=j,t.QuestionService=h,t.UserService=v,t.GamificationService=b,t.ɵb=y,t.ɵa=w,t.ɵc=C,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=gamifilearning-lib.umd.min.js.map